From 4fe445279b715b3a49e7635adc1af152de183bff Mon Sep 17 00:00:00 2001
Message-Id: <cover.1576865663.git.liu.denton@gmail.com>
In-Reply-To: <cover.1576794144.git.liu.denton@gmail.com>
References: <cover.1576794144.git.liu.denton@gmail.com>
From: Denton Liu <liu.denton@gmail.com>
Date: Fri, 20 Dec 2019 10:14:23 -0800
Subject: [PATCH v3 00/15] t: replace incorrect test_must_fail usage (part 1)
To: Git Mailing List <git@vger.kernel.org>
Cc: Eric Sunshine <sunshine@sunshineco.com>,
    Johannes Sixt <j6t@kdbg.org>,
    Junio C Hamano <gitster@pobox.com>

The overall scope of these patches is to replace inappropriate uses of
test_must_fail. IOW, we should only allow test_must_fail to run on `git`
and `test-tool`. Ultimately, we will conclude by making test_must_fail
error out on non-git commands. An advance view of the final series can
be found here[1].

This is the first part. It focuses on t[01]*.sh and also t/lib-git-p4.

Changes since v2:

* Drop the inclusion of test_non_git_must_fail() and open code it
  instead

Changes since v1:

* Incorporate review comments by Junio, Eric and J6t

* Further cleanup of t1507 before inlining full_name() (since we didn't
  want to inline full_name() into a bad command substitution)

[1]: (may be rebased at any time) https://github.com/Denton-L/git/tree/ready/cleanup-test-must-fail2

Denton Liu (15):
  t/lib-git-p4: use test_path_is_missing()
  t0000: replace test_must_fail with run_sub_test_lib_test_err()
  t0003: use named parameters in attr_check()
  t0003: use test_must_be_empty()
  t0003: don't use `test_must_fail attr_check`
  t0020: don't use `test_must_fail has_cr`
  t0020: use ! check_packed_refs_marked
  t1306: convert `test_might_fail rm` to `rm -f`
  t1307: reorder `nongit test_must_fail`
  t1409: let sed open its own input file
  t1409: use test_path_is_missing()
  t1501: remove use of `test_might_fail cp`
  t1507: stop losing return codes of git commands
  t1507: run commands within test_expect_success
  t1507: inline full_name()

 t/lib-git-p4.sh               |   2 +-
 t/t0000-basic.sh              |  14 ++---
 t/t0003-attributes.sh         |  47 +++++++--------
 t/t0020-crlf.sh               |  18 +++---
 t/t1306-xdg-files.sh          |   8 +--
 t/t1307-config-blob.sh        |   2 +-
 t/t1409-avoid-packing-refs.sh |  16 +++---
 t/t1501-work-tree.sh          |   2 +-
 t/t1507-rev-parse-upstream.sh | 104 +++++++++++++++++++---------------
 9 files changed, 112 insertions(+), 101 deletions(-)

Range-diff against v2:
 1:  85cee92765 <  -:  ---------- test-lib-functions: introduce test_non_git_might_fail()
 2:  3d64837af1 =  1:  cf3dd04b8a t/lib-git-p4: use test_path_is_missing()
 3:  778ae9052b =  2:  51a2226726 t0000: replace test_must_fail with run_sub_test_lib_test_err()
 4:  dbc82d45c6 =  3:  9374fcd8db t0003: use named parameters in attr_check()
 5:  e06a06cff5 =  4:  7f8808a850 t0003: use test_must_be_empty()
 6:  219011f983 =  5:  b725d53dbe t0003: don't use `test_must_fail attr_check`
 7:  8da6c96b39 =  6:  f6ef6d245c t0020: don't use `test_must_fail has_cr`
 8:  27550eaae6 =  7:  fc32b8d584 t0020: use ! check_packed_refs_marked
 9:  c19f6344a4 =  8:  7e29b0154e t1306: convert `test_might_fail rm` to `rm -f`
10:  d6ea8a6df0 =  9:  cf43579d65 t1307: reorder `nongit test_must_fail`
11:  d57dfe95e2 = 10:  e2fe278bfa t1409: let sed open its own input file
12:  eacf4e0fb4 = 11:  1eef3f4bc5 t1409: use test_path_is_missing()
13:  83e47748bc ! 12:  fddd224225 t1501: remove use of `test_might_fail cp`
    @@ Commit message
     
         The test_must_fail() family of functions (including test_might_fail())
         should only be used on git commands. Replace test_might_fail() with
    -    test_non_git_might_fail().
    +    a compound command wrapping the old cp invocation that always returns 0.
     
         The `test_might_fail cp` line was introduced in 466e8d5d66 (t1501: fix
         test with split index, 2015-03-24). It is necessary because there might
         exist some index files in `repo.git/sharedindex.*` and, if they exist,
         we want to copy them over. However, if they don't exist, we don't want
         to error out because we expect that possibility. As a result, we want to
    -    keep the "might fail" semantics so we use test_non_git_might_fail().
    +    keep the "might fail" semantics so we always return 0, even if the
    +    underlying cp errors out.
     
      ## t/t1501-work-tree.sh ##
     @@ t/t1501-work-tree.sh: test_expect_success 'Multi-worktree setup' '
    @@ t/t1501-work-tree.sh: test_expect_success 'Multi-worktree setup' '
      	mkdir -p repo.git/repos/foo &&
      	cp repo.git/HEAD repo.git/index repo.git/repos/foo &&
     -	test_might_fail cp repo.git/sharedindex.* repo.git/repos/foo &&
    -+	test_non_git_might_fail cp repo.git/sharedindex.* repo.git/repos/foo &&
    ++	{ cp repo.git/sharedindex.* repo.git/repos/foo || :; } &&
      	sane_unset GIT_DIR GIT_CONFIG GIT_WORK_TREE
      '
      
14:  9e20865f94 = 13:  63ca18207d t1507: stop losing return codes of git commands
15:  7c61ac6b67 = 14:  44a410d57a t1507: run commands within test_expect_success
16:  d09370455f = 15:  4fe445279b t1507: inline full_name()
-- 
2.24.1.703.g2f499f1283

