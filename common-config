[remote "origin"]
	url = git@github.com:Denton-L/git.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[remote "upstream"]
	url = https://github.com/gitster/git.git
	fetch = +refs/heads/*:refs/remotes/upstream/*
[remote]
	pushDefault = origin
[branch "master"]
	remote = upstream
	merge = refs/heads/master
[branch "next"]
	remote = upstream
	merge = refs/heads/next
	rebase = true
[branch "patches"]
	remote = origin
	merge = refs/heads/patches
[format]
	thread = true
	from = true
	signOff = true
	coverLetter = auto
	coverFromDescription = subject
	notes = true
	to = Git Mailing List <git@vger.kernel.org>
[sendemail]
	aliasFileType = mutt
[notes]
	rewriteRef = refs/notes/commits
[push]
	default = matching
[checkout]
	guess = false
[include]
	path = local-config

[branch "branch-specific-format-patch/v3"]
	description = teach branch-specific options for format-patch\n\nChanges since v2:\n\n* Replaced `format.<branch-name>.coverSubject` and `--cover-subject`\n  with `format.inferCoverSubject` and `--infer-cover-subject` which\n  reads the subject from the branch description\n* Do not let `git branch -d` delete `format.<branch-name>.*` configs\n* More documentation cleanup\n* Taught format-patch to read `format.<branch-name>.outputDirectory` as\n  well\n\nChanges since v1:\n\n* Used format.<branch-name>.* variables instead of branch.<branch-name>.*\n
[branch "refactor-4/v3"]
	description = pkt-line: war on magical `4` literal\n\nThere are many instances of the literal `4` in packet line-related code.\nThis series replaces these instances with either functions that can\ngenerate the number or an appropriately-named constant.\n\nChanges since v1:\n\n* Introduce patch 1-2 so that the string length is used to generate the\n  `4` where appropriate\n\nChanges since v2:\n\n* Replace some a couple of inline functions with macros that ensure they\n  are string constants\n\n* Use strlen() in one more instance over the PACKET_HEADER_SIZE
[includeIf "onbranch:refactor-4/"]
	path = refactor-4/config
[includeIf "onbranch:sort-makefile/"]
	path = sort-makefile/config
[includeIf "onbranch:gitk-whitespace/"]
	path = gitk-whitespace/config
[includeIf "onbranch:format-output-relative-gitdir/"]
	path = format-output-relative-gitdir/config
[includeIf "onbranch:better-apply-error/"]
	path = better-apply-error/config
[includeIf "onbranch:branch-specific-format-patch/"]
	path = branch-specific-format-patch/config
[includeIf "onbranch:externcheck/"]
	path = externcheck/config
[includeIf "onbranch:fix-warnings/"]
	path = fix-warnings/config
[branch "stash-show-untracked/v1"]
	description = stash show: learn --include-untracked and --only-untracked\n\nA blindspot that I've noticed in git is that it's not possible to\nproperly view a stash entry that has untracked files via `git stash\nshow`. Teach `git stash show --include-untracked` which should do this.\nIn addition, this series also teaches `--only-untracked` and the\n`stash.showIncludeUntracked` config option.\n\nThe first seven patches of this series are just some clean up that I've\ndone prior to working (because it bothers me). The remaining two patches\nshould be the meat of the change.
[branch "stash-show-untracked/v2"]
	description = stash show: learn --include-untracked and --only-untracked\n\nA blindspot that I've noticed in git is that it's not possible to\nproperly view a stash entry that has untracked files via `git stash\nshow`. Teach `git stash show --include-untracked` which should do this.\nIn addition, this series also teaches `--only-untracked` and the\n`stash.showIncludeUntracked` config option.\n\nThe first seven patches of this series are just some clean up that I've\ndone prior to working (because it bothers me). The remaining two patches\nshould be the meat of the change.\n\nChanges since v1:\n\n* Add a dash for <log-options> and <diff-options>\n\n* Fix the misspelling of --include-untracked in a commit message\n\n* Change the approach from concatenating diffs to using `git read-tree`
[includeIf "onbranch:stash-show-untracked/"]
	path = stash-show-untracked/config
[branch "stash-show-untracked/v3"]
	description = stash show: learn --include-untracked and --only-untracked\n\nA blindspot that I've noticed in git is that it's not possible to\nproperly view a stash entry that has untracked files via `git stash\nshow`. Teach `git stash show --include-untracked` which should do this.\nIn addition, this series also teaches `--only-untracked` and the\n`stash.showIncludeUntracked` config option.\n\nThe first seven patches of this series are just some clean up that I've\ndone prior to working (because it bothers me). The remaining two patches\nshould be the meat of the change.\n\nChanges since v1:\n\n* Add a dash for <log-options> and <diff-options>\n\n* Fix the misspelling of --include-untracked in a commit message\n\n* Change the approach from concatenating diffs to using `git read-tree`
[includeIf "onbranch:stash-cleanup/"]
	path = stash-cleanup/config
